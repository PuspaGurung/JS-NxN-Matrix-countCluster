{"version":3,"sources":["js/main.js","../node_modules/parcel-bundler/src/builtins/bundle-url.js","../node_modules/parcel-bundler/src/builtins/css-loader.js"],"names":["Grid","gridSize","createGrid","displayGrid","getCluster","getClusterItemProperties","handleMouseEvent","handleBgColor","arrRow","row","arrCol","col","push","value","Math","round","random","visited","grid","ul","document","createElement","classList","add","gridWrapper","querySelector","appendChild","forEach","gridRow","gridCol","li","txtNode","createTextNode","content","width","styleUl","addStyleUl","style","styleLi","floor","minHeight","background","addStyleLi","btnApplyColor","getElementById","addEventListener","e","preventDefault","bgColor","target","getItemListDOM","querySelectorAll","item","totNumOfCluster","totNumOfClusterItem","arrIndxValOne","arrayOfCluster","filterGrid","indxValOne","gridItem","i","length","indexOf","call","cluster","indx","clusterItem","itemIndx","noOfItem","indxParentCluster","getAllGridDOM","getNewGridDOM","getNewGridDOMchildElements","children","display","element","gridElement","index","innerHTML","targetIndex","clickMe","getElementsByClassName","className","replace","targetClassName","targetClusterItemUniqueClass","split","getAllTargetClusterItemUniqueClass","getAllHoverMe","hover","cls","screenWidth","window","innerWidth","documentElement","clientWidth","body","onload","setTimeout","defaultValue","errorElement","errorMessage","innerText","join","bundleURL","getBundleURLCached","getBundleURL","Error","err","matches","stack","match","getBaseURL","url","exports","bundle","require","updateLink","link","newLink","cloneNode","remove","href","Date","now","parentNode","insertBefore","nextSibling","cssTimeout","reloadCSS","links","module"],"mappings":"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","file":"main.fb6bbcaf.js","sourceRoot":"..\\src","sourcesContent":["import \"./../scss/main.scss\";\r\n\r\n/** PROJECT DESCRIPTION \r\n * 1. Matrix, count Number of items of the particular cluster when user click on it\r\n * 2. Display the grid or random number 1 and 0, on a web page using a colour to represent 1 s, and empty for  0 s\r\n * 3. When user click on a filled square, count the number of filled squares connected to this\r\n      square, and all other filled squares connected to those squares.Write this number into the\r\n      clicked square.Squares are connected if they are touching horizontally or vertically, NOT\r\n      diagonal.Numbers in other coloured squares should be cleared when a new square is clicked\r\n* 4. Clicking on a non - filled square should do nothing\r\n* 5. While hovering over a filled square, temporarily change the colour of all connected squares\r\n* 6. Allow the grid to be randomly generated with size NxN elements with 0 s and 1 s in\r\n* 7. Add a colour picker to allow the user to change the background colours of the grid.\r\n **/\r\n\r\n/**  ABBREVIATION IN THIS PROJECT\r\ngrid :: a network of lines that cross each other to form a series of squares of rectangles\r\ncluster:: square connection Horizontally and Vertically\r\nsquare:: grid item\r\n**/\r\n\r\n\r\n// GRID\r\nclass Grid {\r\n  constructor(gridSize) {\r\n    this.gridSize = gridSize;\r\n\r\n    this.createGrid();\r\n    this.displayGrid();\r\n    this.getCluster();\r\n    this.getClusterItemProperties();\r\n    this.handleMouseEvent();\r\n    this.handleBgColor();\r\n  }\r\n  // Create NxN matrix of random 1 and 0\r\n  createGrid() {\r\n    let arrRow = [];\r\n    for (let row = 0; row < this.gridSize; row++) {\r\n      let arrCol = [];\r\n      for (let col = 0; col < this.gridSize; col++) {\r\n        arrCol.push({\r\n          value: Math.round(Math.random()),\r\n          visited: false\r\n        });\r\n      }\r\n      arrRow.push(arrCol);\r\n    }\r\n    this.grid = arrRow;\r\n  }\r\n\r\n  // Display NxN matrix in the browser (grid format)\r\n  displayGrid() {\r\n    let ul = document.createElement(\"ul\");\r\n    ul.classList.add(\"grid\");\r\n    let gridWrapper = document.querySelector(\".grid-wrapper\");\r\n    gridWrapper.appendChild(ul);\r\n    this.grid.forEach(gridRow => {\r\n      gridRow.forEach(gridCol => {\r\n        let li = document.createElement(\"li\");\r\n\r\n        if (gridCol.value == 1) {\r\n          li.classList.add(\"grid__filled\");\r\n        }\r\n        let txtNode = document.createTextNode(gridCol.value);\r\n        li.appendChild(txtNode);\r\n        ul.appendChild(li);\r\n\r\n        // APPLY STYLESHEET: ul(className=gird) and li\r\n        // Default grid width: 40rem,\r\n        // Grid width increasy by 8rem each time if uer increase the gridSize by 1\r\n        let content = {\r\n          width: 40 + (this.gridSize - 5) * 8\r\n        };\r\n\r\n        // Grid :: ul\r\n        let styleUl = {\r\n          width: `${content.width}rem`\r\n        };\r\n        let addStyleUl = ul.style;\r\n        for (let style in styleUl) {\r\n          addStyleUl[style] = styleUl[style];\r\n        }\r\n\r\n        let styleLi = {\r\n          //Grid :: ul\r\n          //Grid item :: li\r\n          // Grid item width and item height is calcualte based on the grid width (ul.width)\r\n          width: `${Math.floor(content.width / this.gridSize)}rem`,\r\n          minHeight: `${Math.floor(content.width / this.gridSize)}rem`,\r\n          background: gridCol.value == 1 ? \"#e00201\" : \"white\"\r\n        };\r\n        let addStyleLi = li.style;\r\n\r\n        for (let style in styleLi) {\r\n          addStyleLi[style] = styleLi[style];\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  // Change the background color of cluster \r\n  handleBgColor() {\r\n    let btnApplyColor = document.getElementById(\"change-grid-bg-color\");\r\n    btnApplyColor.addEventListener(\"change\", e => {\r\n      e.preventDefault();\r\n      let bgColor = e.target.value;\r\n      let getItemListDOM = document.querySelectorAll(\".grid__filled\");\r\n      for (let item of getItemListDOM) {\r\n        item.style.background = `${bgColor}`;\r\n      }\r\n    });\r\n  }\r\n\r\n  // Create the array of Cluster\r\n  getCluster() {\r\n    const grid = this.grid;\r\n    let totNumOfCluster = 0;\r\n    let totNumOfClusterItem = 0;\r\n    let arrIndxValOne = []; // Array that contains all the array of index of 1 connected  (vertically or horizontally)\r\n    let arrayOfCluster = []; // Contains the array of cluster\r\n\r\n    let filterGrid = function (row, col, indxValOne = []) {\r\n      let gridItem = grid[row][col];\r\n      if (gridItem.value == 1 && gridItem.visited == false) {\r\n        gridItem.visited = true;\r\n\r\n        //Index of 1 in the grid\r\n        indxValOne.push([row, col]);\r\n        arrIndxValOne.push(indxValOne);\r\n\r\n        // Filter the array of index of one\r\n        // Array of cluster of connected one\r\n        for (let i = 0; i < arrIndxValOne.length; i++) {\r\n          if (arrayOfCluster.indexOf(arrIndxValOne[i]) == -1) {\r\n            arrayOfCluster.push(arrIndxValOne[i]);\r\n          }\r\n        }\r\n\r\n        //*** VISIT GRID ITEM HORIZONTALLY AND VERTICALLY CONNECTED *******/\r\n        if (row < grid.length - 1) {\r\n          filterGrid(row + 1, col, indxValOne);\r\n        }\r\n        if (col < grid[row].length - 1) {\r\n          filterGrid(row, col + 1, indxValOne);\r\n        }\r\n        if (row > 0) {\r\n          filterGrid(row - 1, col, indxValOne);\r\n        }\r\n        if (col > 0) {\r\n          filterGrid(row, col - 1, indxValOne);\r\n        }\r\n      }\r\n    };\r\n\r\n    // Loop through grid\r\n    // Pass the index of grid as the argument for filterGrid()\r\n    for (let row = 0; row < grid.length; row++) {\r\n      for (let col = 0; col < grid[row].length; col++) {\r\n        if (grid[row][col].value == 1) {\r\n          totNumOfClusterItem++;\r\n          filterGrid(row, col);\r\n        }\r\n      }\r\n    }\r\n    // Total number of cluster\r\n    totNumOfCluster = arrayOfCluster.length;\r\n    // array that contains only array of cluster\r\n    this.arrayOfCluster = arrayOfCluster;\r\n  }\r\n\r\n  /** get cluster item (square box) properties ::\r\n    index, number of items (square box) in the particular cluster, index of each cluster from the array of cluster **/\r\n  getClusterItemProperties() {\r\n    let getClusterItemProperties = [];\r\n    //this.arrayOfCluster.forEach()\r\n    [].forEach.call(this.arrayOfCluster, (cluster, indx) => {\r\n      //cluste.forEach()\r\n      [].forEach.call(cluster, (clusterItem) => {\r\n        getClusterItemProperties.push({\r\n          itemIndx: clusterItem[0] * this.gridSize + clusterItem[1], // Index of each element in the cluster based on the grid (dispaly in browser)\r\n          noOfItem: cluster.length, // Total number of the item in the cluster\r\n          indxParentCluster: indx // Index of cluster\r\n        });\r\n      });\r\n    });\r\n    this.getClusterItemProperties = getClusterItemProperties;\r\n  }\r\n\r\n  // MOUSE EVENTS: mouseOver and click \r\n  handleMouseEvent() {\r\n    let clusterItem = this.getClusterItemProperties;\r\n    let getAllGridDOM = document.querySelectorAll(\".grid\");\r\n    let getNewGridDOM = getAllGridDOM[getAllGridDOM.length - 1];\r\n    let getNewGridDOMchildElements = getNewGridDOM.children;\r\n\r\n    // hide previous grid (show only latest grid at a time)\r\n    if (getAllGridDOM.length > 1) {\r\n      for (let i = 0; i < getAllGridDOM.length - 1; i++) {\r\n        getAllGridDOM[i].style.display = \"none\";\r\n      }\r\n    }\r\n\r\n    for (\r\n      let element = 0; element < getNewGridDOMchildElements.length; element++\r\n    ) {\r\n      // get Index of each new grid elements\r\n      let gridElement = getNewGridDOMchildElements;\r\n      gridElement[element].index = element;\r\n      gridElement[element].innerHTML = \"\";\r\n\r\n      //Note: Indivudual cluster includes one unique class name in their item\r\n      // Add unique class Name to all item of the particualr cluster\r\n      clusterItem.forEach(item => {\r\n        if (item.itemIndx == gridElement[element].index) {\r\n          gridElement[element].classList.add(\r\n            `grid--cluster${item.indxParentCluster}`\r\n          );\r\n        }\r\n      });\r\n\r\n      // Display the total number of cluster items when the user click on any item (filled dquare)of the cluster\r\n      // Do nothing when user click on empty square\r\n      gridElement[element].addEventListener(\"click\", e => {\r\n        let targetIndex = e.target.index;\r\n        clusterItem.forEach(item => {\r\n          if (item.itemIndx == targetIndex) {\r\n            let clickMe = document.getElementsByClassName(\"clickMe\");\r\n            if (clickMe.length > 0) {\r\n              clickMe[0].innerHTML = \"\";\r\n              clickMe[0].className = clickMe[0].className.replace(\r\n                \"clickMe\",\r\n                \"\"\r\n              );\r\n            }\r\n            gridElement[element].classList.add(\"clickMe\");\r\n            gridElement[element].innerHTML = item.noOfItem;\r\n          }\r\n        });\r\n      });\r\n\r\n      document\r\n        .querySelector(\".grid-wrapper\")\r\n        .addEventListener(\"mouseover\", e => {\r\n          let target = e.target;\r\n\r\n          // Array that contain two className of targe hover element:: [grid__item, grid--cluster(cluster index)]\r\n          let targetClassName = target.className;\r\n\r\n          //Get second element of array targetClassName:: grid--cluster(cluster index)\r\n          //Target cluster contains the same className in the element of that cluster\r\n          let targetClusterItemUniqueClass = targetClassName.split(\" \")[1];\r\n\r\n          // Get all list of unique className of individual cluster item\r\n          let getAllTargetClusterItemUniqueClass = document.querySelectorAll(\r\n            `.${targetClusterItemUniqueClass}`\r\n          );\r\n\r\n          let getAllHoverMe = document.querySelectorAll(\".hover-item\");\r\n          if (getAllHoverMe.length > 0) {\r\n            //getAllHoverMe.forEach()\r\n            [].forEach.call(getAllHoverMe, (hover) => {\r\n              hover.className = hover.className.replace(\"hover-item\", \"\");\r\n            });\r\n          }\r\n          //getAllTargetClusterItemUniqueClass.forEach()\r\n          [].forEach.call(getAllTargetClusterItemUniqueClass, (cls) => {\r\n            cls.classList.add(\"hover-item\");\r\n          })\r\n        });\r\n    }\r\n  }\r\n}\r\n\r\n//get screen width\r\nlet screenWidth = window.innerWidth ||\r\n  document.documentElement.clientWidth ||\r\n  document.body.clientWidth;\r\n\r\n// Default grid size  \r\n\r\n/** Default grid size based on screen width\r\n *  width <=500px\r\n * width >=500px \r\n **/\r\nwindow.onload = () => {\r\n  setTimeout(() => {\r\n    (screenWidth > 500) ? new Grid(8) && (document.getElementById(\"grid-size\").defaultValue = 8): new Grid(6) && (document.getElementById(\"grid-size\").defaultValue = 6)\r\n  }, 10)\r\n\r\n};\r\n\r\n// ALLOw TO CHANGE GRID SIZE\r\ndocument.getElementById(\"grid-size\").addEventListener(\"change\", e => {\r\n  let gridSize = e.target.value;\r\n  let errorElement = document.getElementById(\"error-message\");\r\n  let errorMessage = [];\r\n  if (screenWidth <= 500) {\r\n    //grid size shuld be between 4 and 6\r\n    gridSize == \"\" ?\r\n      errorMessage.push(\"Grid size input field should not be empty\") :\r\n      gridSize > 6 || gridSize < 3 ?\r\n      errorMessage.push(\"Grid size should be between 5 and 10\") :\r\n      new Grid(gridSize);\r\n\r\n    // If  grid size is less than 3 and greater than 6 then dispaly error message\r\n    errorMessage.length > 0 ?\r\n      (errorElement.innerText = errorMessage.join(\", \")) :\r\n      (errorElement.innerText = \" \");\r\n  } else {\r\n    //grid size shuld be between 5 and 10\r\n    gridSize == \"\" ?\r\n      errorMessage.push(\"Grid size input field should not be empty\") :\r\n      gridSize > 10 || gridSize < 5 ?\r\n      errorMessage.push(\"Grid size should be between 5 and 10\") :\r\n      new Grid(gridSize);\r\n\r\n    // If  grid size is less than 5 and greater than 10 then dispaly error message\r\n    errorMessage.length > 0 ?\r\n      (errorElement.innerText = errorMessage.join(\", \")) :\r\n      (errorElement.innerText = \" \");\r\n  }\r\n\r\n});","var bundleURL = null;\nfunction getBundleURLCached() {\n  if (!bundleURL) {\n    bundleURL = getBundleURL();\n  }\n\n  return bundleURL;\n}\n\nfunction getBundleURL() {\n  // Attempt to find the URL of the current script and use that as the base URL\n  try {\n    throw new Error;\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\\/\\/[^)\\n]+/g);\n    if (matches) {\n      return getBaseURL(matches[0]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\n","var bundle = require('./bundle-url');\n\nfunction updateLink(link) {\n  var newLink = link.cloneNode();\n  newLink.onload = function () {\n    link.remove();\n  };\n  newLink.href = link.href.split('?')[0] + '?' + Date.now();\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\n\nvar cssTimeout = null;\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n    for (var i = 0; i < links.length; i++) {\n      if (bundle.getBaseURL(links[i].href) === bundle.getBundleURL()) {\n        updateLink(links[i]);\n      }\n    }\n\n    cssTimeout = null;\n  }, 50);\n}\n\nmodule.exports = reloadCSS;\n"]}